name: CI

on:
  push:
    branches-ignore: [staging.tmp]
  pull_request:
    branches-ignore: [staging.tmp]

jobs:
  ios_build:
    name: iOS Stable
    runs-on: macos-10.15
    env:
      TARGET: aarch64-apple-ios
    steps:
      - uses: actions/checkout@v2
      - name: Prepare Rust
        run: rustup target add ${{ env.TARGET }}
      - run: cargo check --manifest-path src/backend/metal/Cargo.toml --target ${{ env.TARGET }}

  android_build:
    name: Android Stable
    runs-on: ubuntu-18.04
    env:
      TARGET: aarch64-linux-android
    steps:
      - uses: actions/checkout@v2
      - run: echo "$ANDROID_HOME/ndk-bundle/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH
      - name: Prepare Rust
        run: rustup target add ${{ env.TARGET }}
      - run: cargo check --manifest-path src/backend/vulkan/Cargo.toml --target ${{ env.TARGET }}
      - run: cargo check --manifest-path src/backend/gl/Cargo.toml --target ${{ env.TARGET }}

  webgl_build:
    name: Web Assembly
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - run: rustup target add wasm32-unknown-unknown
      - run: cargo build --manifest-path examples/Cargo.toml --features gl --target wasm32-unknown-unknown --bin quad

  webgpu_backend_build:
    name: WebGPU
    runs-on: ubuntu-18.04
    continue-on-error: true
    env:
      RUSTFLAGS: --cfg=web_sys_unstable_apis
    steps:
      - uses: actions/checkout@v2
      - run: rustup target add wasm32-unknown-unknown
      - run: cargo build --manifest-path src/backend/webgpu/Cargo.toml --target wasm32-unknown-unknown

  check-advisories:
    name: Advisory Check
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check advisories

  check-dependencies:
    name: Dependency Check
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          command: check bans licenses sources

  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name:
          [
            MacOS Stable,
            MacOS Nightly,
            Ubuntu Stable,
            Ubuntu Nightly,
            Windows Stable,
            Windows Nightly,
          ]
        include:
          - os: macos-10.15
            name: MacOS Stable
            channel: stable
          - os: macos-10.15
            name: MacOS Nightly
            channel: nightly
          - os: ubuntu-18.04
            name: Ubuntu Stable
            channel: stable
          - os: ubuntu-18.04
            name: Ubuntu Nightly
            channel: nightly
          - os: windows-2019
            name: Windows Stable
            channel: stable
          - os: windows-2019
            name: Windows Nightly
            channel: nightly
    steps:
      - uses: actions/checkout@v2
      - if: matrix.channel == 'nightly'
        name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - if: matrix.os == 'windows-2019'
        name: Install make
        run: choco install make
      #- if: matrix.channel == 'stable'
      #  run: rustup component add clippy
      - run: make all
